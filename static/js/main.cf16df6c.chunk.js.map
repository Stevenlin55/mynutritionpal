{"version":3,"sources":["auth.js","components/Navbar.js","components/Food.js","components/QuickAddModal.js","components/TotalsTable.js","components/FoodDiary.js","components/EditFood.js","components/AddFood.js","components/Login.js","components/Register.js","GuardedRoute.js","components/MyFoods.js","App.js","reportWebVitals.js","index.js"],"names":["this","isAuthenticated","username","password","callback","axios","post","then","res","status","localStorage","setItem","data","_id","catch","err","alert","removeItem","registerSuccess","Navbar","props","user","useState","isOpen","setIsOpen","Object","keys","length","className","to","type","onClick","Auth","logout","window","location","href","aria-controls","aria-expanded","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","id","Food","food","name","state","totalProtein","totals","protein","totalCalories","calories","totalObjectID","deleteFood","QuickAddModal","showModal","setShowModal","setCalories","setProtein","onSubmit","e","preventDefault","newTotalCalories","parseInt","newTotalProtein","totalObject","getItem","error","console","log","setTotals","min","value","onChange","target","TotalsTable","date","useEffect","updateTotals","allTotals","selectedDate","Date","getFullYear","getMonth","getDate","total","filter","totalDate","toString","userID","totalID","createTotalIfDoesNotExist","get","totalsForToday","Fragment","FoodDiary","foodToShow","setFoodToShow","setDate","delete","newList","isSubscribed","allFood","foodList","foodDate","updateFoodList","size","color","currentDate","newDate","decreaseDate","selected","dateFormat","increaseDate","map","currentFood","EditFood","setName","oldCaloriesRef","useRef","oldProteinRef","oldDateRef","useLocation","navigate","useNavigate","current","getTime","updateTotalsOnDateChange","caloriesDifference","proteinDifference","updateTotalsIfDateDidNotChange","required","AddFood","Login","setUsername","setPassword","login","placeholder","htmlFor","Register","register","GuardedRoute","component","rest","MyFoods","foods","setFoods","foodID","setFoodID","setAllTotals","totalInfoForSelected","setTotalInfoForSelected","toCorrectDateFormat","document","getElementById","style","display","dateObject","tabIndex","getTotalForDate","updateNutritionFacts","updatedFoodList","App","setUser","loading","setLoading","role","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gRAsDe,M,WAlDX,aAAe,oBACXA,KAAKC,iBAAkB,E,yCAG3B,SAAMC,EAAUC,EAAUC,GAAW,IAAD,OAEhCC,IAAMC,KAAK,oCAAqC,CAAEJ,WAAUC,aAC3DI,MAAK,SAACC,GACc,MAAfA,EAAIC,SAENC,aAAaC,QAAQ,QAASH,EAAII,KAAKC,KACvC,EAAKZ,iBAAkB,EAEvBG,EAAS,EAAKH,qBAGjBa,OAAM,SAACC,GACNC,MAAM,uC,oBAKZ,SAAOZ,GAEHM,aAAaO,WAAW,SACxBjB,KAAKC,iBAAkB,EAGvBG,M,sBAGJ,SAASF,EAAUC,GAAW,IAAD,OAEzBE,IAAMC,KAAK,uCAAwC,CAAEJ,WAAUC,aAC9DI,MAAK,SAACC,GACc,MAAfA,EAAIC,SACNO,MAAM,oDACN,EAAKE,iBAAkB,MAG1BJ,OAAM,SAACC,GACNC,MAAM,kD,6BAIZ,WACI,OAAOhB,KAAKC,oB,aCyGLkB,MAnJf,SAAgBC,GAAQ,IAChBC,EAASD,EAATC,KADe,EAGOC,oBAAS,GAHhB,mBAGdC,EAHc,KAGNC,EAHM,KAMrB,OAAiC,IAA7BC,OAAOC,KAAKL,GAAMM,OAElB,8BACE,sBAAKC,UAAU,4BAAf,UACE,qBAAKA,UAAU,yCAAf,SACE,sBAAKA,UAAU,yCAAf,UACE,sBAAKA,UAAU,2CAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,IAAD,CACEA,UAAU,uEACVC,GAAG,IAFL,8BAOF,qBAAKD,UAAU,kBAAf,SACE,sBAAKA,UAAU,sCAAf,UACE,cAAC,IAAD,CACEA,UAAU,qFACVC,GAAG,IAFL,wBAOA,cAAC,IAAD,CACED,UAAU,qFACVC,GAAG,WAFL,sBAOA,wBACEC,KAAK,SACLF,UAAU,wDACVG,QAAS,WACPC,EAAKC,QAAO,WACVC,OAAOC,SAASC,KAAO,QAL7B,6BAcN,qBAAKR,UAAU,uBAAf,SACE,wBACEG,QAAS,kBAAMP,GAAWD,IAC1BO,KAAK,SACLF,UAAU,kMACVS,gBAAc,cACdC,gBAAc,QALhB,SAQIf,EAGA,cAAC,IAAD,IAFA,cAAC,IAAD,aAWV,cAAC,IAAD,CACEgB,KAAMhB,EACNiB,MAAM,6CACNC,UAAU,qBACVC,QAAQ,wBACRC,MAAM,2CACNC,UAAU,wBACVC,QAAQ,qBAPV,SASG,kBACC,qBAAKjB,UAAU,YAAYkB,GAAG,cAA9B,SACE,sBAAKlB,UAAU,sBAAf,UACE,cAAC,IAAD,CACEA,UAAU,8FACVC,GAAG,IACHE,QAAS,kBAAMP,GAAWD,IAH5B,wBAQA,cAAC,IAAD,CACEK,UAAU,8FACVC,GAAG,WACHE,QAAS,kBAAMP,GAAWD,IAH5B,sBAOA,wBACIO,KAAK,SACLF,UAAU,+GACVG,QAAS,WACPC,EAAKC,QAAO,WACVC,OAAOC,SAASC,KAAO,QAL/B,kCAqBZ,8BACE,sBAAKR,UAAU,+DAAf,UACE,qBAAKA,UAAU,wCAAf,SACE,cAAC,IAAD,CAAMA,UAAU,0BAA0BC,GAAG,IAA7C,8BAKF,oBAAID,UAAU,wEAAd,SACE,oBAAIA,UAAU,iBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,0BAA0BC,GAAG,SAA7C,SACE,wBACEC,KAAK,SACLF,UAAU,wDAFZ,gC,iBClHDmB,EApBF,SAAC3B,GAAD,OACX,qBAAIQ,UAAU,cAAd,UAEE,qBAAIA,UAAU,4BAAd,UACGR,EAAM4B,KAAKC,KAAM,IAClB,cAAC,IAAD,CAAMpB,GAAI,SAAWT,EAAM4B,KAAKnC,IAAKqC,MAAO,CAAEJ,GAAI1B,EAAM4B,KAAKnC,IAAKsC,aAAc/B,EAAMgC,OAAOC,QAASC,cAAelC,EAAMgC,OAAOG,SAAUC,cAAepC,EAAMgC,OAAON,IAAxK,SACE,cAAC,IAAD,CAAalB,UAAU,0DAEzB,cAAC,IAAD,CACEG,QAAS,WACPX,EAAMqC,WAAWrC,EAAM4B,KAAKnC,IAAKO,EAAM4B,KAAKO,SAAUnC,EAAM4B,KAAKK,UAEnEzB,UAAU,qEAGd,oBAAIA,UAAU,kCAAd,SAAiDR,EAAM4B,KAAKO,WAC5D,oBAAI3B,UAAU,kCAAd,SAAiDR,EAAM4B,KAAKK,c,YChBjD,SAASK,EAActC,GAAQ,IAAD,EACTE,oBAAS,GADA,mBACpCqC,EADoC,KACzBC,EADyB,OAEXtC,mBAAS,GAFE,mBAEpCiC,EAFoC,KAE1BM,EAF0B,OAGbvC,mBAAS,GAHI,mBAGpC+B,EAHoC,KAG3BS,EAH2B,KAK3C,SAASC,EAASC,GAChBA,EAAEC,iBACF,IAAMC,EAAmB9C,EAAMkC,cAAgBa,SAASZ,GAClDa,EAAkBhD,EAAM+B,aAAegB,SAASd,GAGlDgB,EAAc,CAChBd,SAAUW,EACVb,QAASe,GAIX/D,IAAMC,KAAK,uCAAyCI,aAAa4D,QAAQ,WAAYD,GAC9EvD,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAGpCnD,EAAMsD,UAAU,CAAEnB,SAAUW,EAAkBb,QAASe,IAGvDP,EAAY,GACZC,EAAW,GAEXF,GAAa,GAGf,OACE,qCAEE,qBAAKhC,UAAU,iGAAkGG,QAAS,kBAAM6B,GAAa,IAA7I,uBACCD,EACC,qCACE,qBACE/B,UAAU,wHADZ,SAGE,qBAAKA,UAAU,kDAAf,SAEE,sBAAKA,UAAU,uGAAf,UAEE,sBAAKA,UAAU,2FAAf,UACE,oBAAIA,UAAU,yBAAd,uBAGA,wBACEA,UAAU,2IACVG,QAAS,kBAAM6B,GAAa,IAF9B,SAIE,sBAAMhC,UAAU,6FAAhB,uBAMJ,qBAAKA,UAAU,8BAAf,SAGA,uBAAMA,UAAU,UAAUmC,SAAU,SAACC,GAAD,OAAOD,EAASC,IAApD,UAEI,sBAAKpC,UAAU,oDAAf,UACE,uBAAOA,UAAU,qBAAjB,wBACA,uBACIE,KAAK,SACL6C,IAAI,IACJ/C,UAAU,+BACVgD,MAAOrB,EACPsB,SAAU,SAAAb,GAAC,OAAIH,EAAYG,EAAEc,OAAOF,aAG1C,sBAAKhD,UAAU,oDAAf,UACE,uBAAOA,UAAU,qBAAjB,uBACA,uBACIE,KAAK,SACL6C,IAAI,IACJ/C,UAAU,+BACVgD,MAAOvB,EACPwB,SAAU,SAAAb,GAAC,OAAIF,EAAWE,EAAEc,OAAOF,kBAO7C,sBAAKhD,UAAU,wFAAf,UACE,wBACEA,UAAU,8JACVE,KAAK,SACLC,QAAS,WACP6B,GAAa,GACbC,EAAY,GACZC,EAAW,IANf,oBAWA,wBACElC,UAAU,mMACVE,KAAK,SACLC,QAAS,SAACiC,GAAD,OAAOD,EAASC,IAH3B,2BAWR,qBAAKpC,UAAU,8CAEf,QCjHV,IA0GemD,EA1GK,SAAC3D,GACjB,IAAM4B,EAAO5B,EAAM4B,KACbgC,EAAO5D,EAAM4D,KACb3D,EAAOD,EAAMC,KA8EnB,OA5EA4D,qBAAU,WAEN,SAASC,EAAaF,EAAMG,EAAW9D,GAGnC,IAAI+D,EAAe,IAAIC,KACtBL,EAAKM,cACLN,EAAKO,WACLP,EAAKQ,WAIHC,EAAQN,EAAUO,QAAO,SAACD,GAE5B,IAAIE,EAAY,IAAIN,KAAKI,EAAMT,MAM/B,OALyB,IAAIK,KAC3BM,EAAUL,cACVK,EAAUJ,WACVI,EAAUH,WAEcI,aAAeR,EAAaQ,cAInDvB,EAAc,CACdvB,GAAI,GACJS,SAAU,EACVF,QAAS,GAcb,OAVIoC,EAAM9D,OAAS,GACfjB,aAAaC,QAAQ,UAAW8E,EAAM,GAAG5E,KAEzCwD,EAAYvB,GAAK2C,EAAM,GAAG5E,IAC1BwD,EAAYd,SAAWkC,EAAM,GAAGlC,SAChCc,EAAYhB,QAAUoC,EAAM,GAAGpC,SAuB3C,SAAmC2B,EAAM3D,GAErC,IAAMoE,EAAQ,CACVI,OAAQxE,EACRkC,SAAU,EACVF,QAAS,EACT2B,KAAMA,GAGV3E,IAAMC,KAAK,mCAAoCmF,GAAOlF,MAAK,SAACC,GAExD,IAAMsF,EAAUtF,EAAII,KAAKC,IAEzBH,aAAaC,QAAQ,UAAWmF,MACjChF,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAnCxBwB,CAA0Bf,EAAM3D,GAG7BgD,EAKXhE,IAAM2F,IAAI,qCAAuC3E,GAChDd,MAAK,SAACC,GACL,IAAI2E,EAAY3E,EAAII,KAChBqF,EAAiBf,EAAaF,EAAMG,EAAW9D,GAGnDD,EAAMsD,UAAUuB,MAEjBnF,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,QAC/B,CAACnD,EAAO4D,EAAM3D,EAAM2B,IAuBnB,cADA,CACC,IAAMkD,SAAP,WACI,+BACA,oBAAItE,UAAU,+BAAd,SACA,qBAAKA,UAAU,OAAf,uBAGA,oBAAIA,UAAU,uEAAd,SAAsFR,EAAMkC,gBAE5F,oBAAI1B,UAAU,uEAAd,SAAsFR,EAAM+B,kBAEhG,+BACI,oBAAIvB,UAAU,WACd,oBAAIA,UAAU,8EAAd,6BAGA,oBAAIA,UAAU,8EAAd,gCC4FGuE,EAvLG,SAAC/E,GAAW,IAAD,EAESE,mBAAS,IAFlB,mBAEpB8E,EAFoB,KAERC,EAFQ,OAGH/E,mBAAS,IAAI+D,MAHV,mBAGpBL,EAHoB,KAGdsB,EAHc,OAIChF,mBAAS,CAACwB,GAAI,GAAIS,SAAU,EAAGF,QAAS,IAJzC,mBAIpBD,EAJoB,KAIZsB,EAJY,KAKnBrD,EAASD,EAATC,KA0CR,SAASoC,EAAWX,EAAIS,EAAUF,GAChChD,IAAMkG,OAAO,+BAAiCzD,GAAIhC,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAE/E,IAAIF,EAAc,KAClBhE,IAAM2F,IAAI,gCAAkCtF,aAAa4D,QAAQ,YAAY/D,MAAK,SAAAC,IAChF6D,EAAc7D,EAAII,MAEN2C,UAAYA,EACxBc,EAAYhB,SAAWA,EAEvBhD,IAAMC,KAAK,uCAAyCI,aAAa4D,QAAQ,WAAYD,GAClF9D,MAAK,WAEF,IAAIiG,EAAUJ,EAAWV,QAAO,SAAC1C,GAAD,OAAUA,EAAKnC,MAAQiC,KACvDuD,EAAcG,MAEjB1F,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,SAE7BzD,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,MAkDhC,OA5GAU,qBAAU,WAER,IAAIwB,GAAe,EAajB,OAVEpG,IAAM2F,IAAI,oCAAsC3E,GAC/Cd,MAAK,SAACC,GACL,GAAIiG,EAAc,CAChB,IAAIC,EAAUlG,EAAII,MAuD5B,SAAwBoE,EAAM0B,EAASrF,GAGrC,IAAI+D,EAAe,IAAIC,KACrBL,EAAKM,cACLN,EAAKO,WACLP,EAAKQ,WAIHmB,EAAWD,EAAQhB,QAAO,SAAC1C,GAE7B,IAAI4D,EAAW,IAAIvB,KAAKrC,EAAKgC,MAM7B,OALwB,IAAIK,KAC1BuB,EAAStB,cACTsB,EAASrB,WACTqB,EAASpB,WAEcI,aAAeR,EAAaQ,cAIvDS,EAAcM,GA3ENE,CAAe7B,EAAM0B,OAGxB5F,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAEzB,WAELkC,GAAe,EACfJ,EAAc,OAIjB,CAACrB,EAAM3D,IAuFR,sBAAKO,UAAU,iBAAf,UACE,sBAAKA,UAAU,wDAAf,UACE,qBAAKA,UAAU,YAAf,kCACA,sBAAKA,UAAU,8BAAf,UAEE,cAAC,IAAD,CACEkF,KAAM,GACNC,MAAO,OACPnF,UAAU,iBAEVkB,GAAG,aACHf,QAAS,kBA/FnB,WACE,IAAIiF,EAAchC,EAEdiC,EAAUD,EAAYV,QAAQU,EAAYxB,UAAY,GAC1Dc,EAAQ,IAAIjB,KAAK4B,IA2FMC,MAGjB,cAAC,IAAD,CACEtF,UAAU,sFACVuF,SAAUnC,EACVH,SAAU,SAACG,GAAD,OAAUsB,EAAQtB,IAC5BlC,GAAG,cACHsE,WAAW,iBAGb,cAAC,IAAD,CACEN,KAAM,GACNC,MAAO,OACPnF,UAAU,iBACVkB,GAAG,cACHf,QAAS,kBAxGnB,WACE,IAAIiF,EAAchC,EAEdiC,EAAUD,EAAYV,QAAQU,EAAYxB,UAAY,GAC1Dc,EAAQ,IAAIjB,KAAK4B,IAoGMI,YAMrB,qBAAKzF,UAAU,OAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,sBACd,oBAAIA,UAAU,8EAAd,6BAGA,oBAAIA,UAAU,8EAAd,8BAMJ,gCAhESwE,EAECkB,KAAI,SAACC,GAEnB,OAEE,aADA,CACC,EAAD,CACEvE,KAAMuE,EACN9D,WAAYA,EAEZL,OAAQA,GADHmE,EAAY1G,UAwDjB,kCAEE,oBAAIe,UAAU,aAAd,SACE,qBAAIA,UAAU,MAAd,UACE,cAAC,IAAD,CAAMA,UAAU,kFAAkFC,GAAI,OAASqB,MAAO,CAAE8B,QAAxH,sBACC,QACD,cAACtB,EAAD,CAAegB,UAAWA,EAAWpB,cAAeF,EAAOG,SAAUJ,aAAcC,EAAOC,eAG/F,cAAC,EAAD,CAAaL,KAAMoD,EAAYpB,KAAMA,EAAM3D,KAAMA,EAAMqD,UAAWA,EAAWpB,cAAeF,EAAOG,SAAUJ,aAAcC,EAAOC,sBCmB9HmE,EArME,SAACpG,GAAW,IAAD,EAEFE,mBAAS,IAFP,mBAEnB2B,EAFmB,KAEbwE,EAFa,OAGMnG,mBAAS,GAHf,mBAGnBiC,EAHmB,KAGTM,EAHS,OAIIvC,mBAAS,GAJb,mBAInB+B,EAJmB,KAIVS,EAJU,OAKFxC,mBAAS,IAAI+D,MALX,mBAKnBL,EALmB,KAKbsB,EALa,KAQpBoB,EAAiBC,iBAAO,GACxBC,EAAgBD,iBAAO,GACvBE,EAAaF,iBAAO,IAAItC,MAEtBnC,EAAU4E,cAAV5E,MACAJ,EAAmDI,EAAnDJ,GAAIQ,EAA+CJ,EAA/CI,cAAeH,EAAgCD,EAAhCC,aAAcK,EAAkBN,EAAlBM,cAEjCnC,EAASD,EAATC,KACF0G,EAAWC,cAoBjB,SAASjE,EAASC,GAChBA,EAAEC,iBAGD,IAAMjB,EAAO,CACZC,OACAM,SAAUA,EACVF,QAASA,EACT2B,KAAMA,GAIR3E,IAAMC,KAAK,sCAAwCwC,EAAIE,GAAMlC,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAGtFsD,EAAWI,QAAQC,YAAclD,EAAKkD,UAQ5C,WAEE,IAAI7D,EAAc,CAChBd,SAAUD,EAAgBoE,EAAeO,QACzC5E,QAASF,EAAeyE,EAAcK,SAGxC5H,IAAMC,KAAK,uCAAyCkD,EAAea,GAAa9D,MAAK,WAG/EF,IAAM2F,IAAI,qCAAuC3E,GAAMd,MAAK,SAAAC,GAG1D,IAiBIgD,EAjBA4B,EAAe,IAAIC,KACtBL,EAAKM,cACLN,EAAKO,WACLP,EAAKQ,WAIHC,EAAQjF,EAAII,KAAK8E,QAAO,SAACD,GAE3B,IAAIE,EAAY,IAAIN,KAAKI,EAAMT,MAM/B,OALyB,IAAIK,KAC3BM,EAAUL,cACVK,EAAUJ,WACVI,EAAUH,WAEcI,aAAeR,EAAaQ,cAIlC,IAAjBH,EAAM9D,QACN0C,EAAc,CACVwB,OAAQxE,EACRkC,SAAUA,EACVF,QAASA,EACT2B,KAAMA,GAGV3E,IAAMC,KAAK,mCAAoC+D,GAAa9D,MAAK,kBAAOwH,GAAU,MAAIjH,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,QAEnHF,EAAc,CACZd,SAAUkC,EAAM,GAAGlC,SACnBF,QAASoC,EAAM,GAAGpC,SAGpBG,EAAgBiC,EAAM,GAAG5E,IAEzBwD,EAAYd,UAAYY,SAASZ,EAAU,IAC3Cc,EAAYhB,SAAWc,SAASd,EAAS,IAEzChD,IAAMC,KAAK,uCAAyCkD,EAAea,GAAa9D,MAAK,WAE/EwH,GAAU,MACbjH,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,UAE/BzD,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,SACjCzD,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,MAjE5B4D,GAoEJ,WAGE,IAAMC,EAAqBjE,SAASZ,EAAU,IAAMmE,EAAeO,QAC7DI,EAAoBlE,SAASd,EAAS,IAAMuE,EAAcK,QAG1D5D,EAAc,CAClBd,SAAUD,EAAgB8E,EAC1B/E,QAASF,EAAekF,GAK1BhI,IAAMC,KAAK,uCAAyCkD,EAAea,GAAa9D,MAAK,WAE/EwH,GAAU,MACbjH,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,MAnF5B+D,GAsFJ,OA1HArD,qBAAU,WAEN5E,IAAM2F,IAAI,+BAAiClD,GACxCvC,MAAK,SAACC,GACLiH,EAAQjH,EAAII,KAAKqC,MACjBY,EAAYrD,EAAII,KAAK2C,UACrBO,EAAWtD,EAAII,KAAKyC,SACpBiD,EAAQ,IAAIjB,KAAK7E,EAAII,KAAKoE,OAE1B0C,EAAeO,QAAUzH,EAAII,KAAK2C,SAClCqE,EAAcK,QAAUzH,EAAII,KAAKyC,QACjCwE,EAAWI,QAAU,IAAI5C,KAAK7E,EAAII,KAAKoE,WAK5C,CAAClC,IA2GF,sBAAKlB,UAAU,YAAf,UACE,oBAAIA,UAAU,OAAd,uBACA,uBAAMmC,SAAU,SAACC,GAAD,OAAOD,EAASC,IAAhC,UACE,sBAAKpC,UAAU,kBAAf,UACE,2CACA,uBACEE,KAAK,OACLyG,UAAQ,EACR3G,UAAU,eACVgD,MAAO3B,EACP4B,SAAU,SAACb,GAAD,OAAOyD,EAAQzD,EAAEc,OAAOF,aAGtC,sBAAKhD,UAAU,kBAAf,UACE,+CACA,uBACEE,KAAK,SACL6C,IAAI,IACJ/C,UAAU,eACVgD,MAAOrB,EACPsB,SAAU,SAACb,GAAD,OAAOH,EAAYG,EAAEc,OAAOF,aAG1C,sBAAKhD,UAAU,kBAAf,UACE,8CACA,uBACEE,KAAK,SACL6C,IAAI,IACJ/C,UAAU,eACVgD,MAAOvB,EACPwB,SAAU,SAACb,GAAD,OAAOF,EAAWE,EAAEc,OAAOF,aAGzC,sBAAKhD,UAAU,kBAAf,UACE,2CACA,8BACE,cAAC,IAAD,CACEA,UAAU,gBACVuF,SAAUnC,EACVH,SAAU,SAACG,GAAD,OAAUsB,EAAQtB,WAKlC,qBAAKpD,UAAU,aAAf,SACE,uBACEE,KAAK,SACL8C,MAAM,YACNhD,UAAU,6BC7CP4G,EA/IC,SAACpH,GAAW,IAAD,EACCE,mBAAS,IADV,mBAChB2B,EADgB,KACVwE,EADU,OAESnG,mBAAS,GAFlB,mBAEhBiC,EAFgB,KAENM,EAFM,OAGOvC,mBAAS,GAHhB,mBAGhB+B,EAHgB,KAGPS,EAHO,OAICxC,mBAAS,IAAI+D,MAJd,mBAIhBL,EAJgB,KAIVsB,EAJU,KAOfpD,EAAU4E,cAAV5E,MACF6E,EAAWC,cAGjB/C,qBAAU,WAGF/B,GACFoD,EAAQpD,EAAM8B,QAGjB,CAAC9B,IAlBmB,IAoBf7B,EAASD,EAATC,KAuER,OACI,sBAAKO,UAAU,YAAf,UACA,oBAAIA,UAAU,OAAd,sBACA,uBAAMmC,SAAU,SAACC,GAAD,OAxEpB,SAAkBA,GACdA,EAAEC,iBAGF,IAAMjB,EAAO,CACT6C,OAAQxE,EACR4B,OACAM,SAAUA,EACVF,QAASA,EACT2B,KAAMA,GAIV3E,IAAMC,KAAK,kCAAmC0C,GAAMlC,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,MAI/E,IAAIF,EAAc,KAElBhE,IAAM2F,IAAI,qCAAuC3E,GAAMd,MAAK,SAAAC,GAGxD,IAiBIgD,EAjBA4B,EAAe,IAAIC,KACtBL,EAAKM,cACLN,EAAKO,WACLP,EAAKQ,WAIHC,EAAQjF,EAAII,KAAK8E,QAAO,SAACD,GAE3B,IAAIE,EAAY,IAAIN,KAAKI,EAAMT,MAM/B,OALyB,IAAIK,KAC3BM,EAAUL,cACVK,EAAUJ,WACVI,EAAUH,WAEcI,aAAeR,EAAaQ,cAIlC,IAAjBH,EAAM9D,QACN0C,EAAc,CACVwB,OAAQxE,EACRkC,SAAUP,EAAKO,SACfF,QAASL,EAAKK,QACd2B,KAAMA,GAGV3E,IAAMC,KAAK,mCAAoC+D,GAAa9D,MAAK,kBAAOwH,GAAU,MAAIjH,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,QAEnHF,EAAc,CACZd,SAAUkC,EAAM,GAAGlC,SACnBF,QAASoC,EAAM,GAAGpC,SAGpBG,EAAgBiC,EAAM,GAAG5E,IAEzBwD,EAAYd,UAAYY,SAASnB,EAAKO,SAAU,IAChDc,EAAYhB,SAAWc,SAASnB,EAAKK,QAAS,IAE9ChD,IAAMC,KAAK,uCAAyCkD,EAAea,GAAa9D,MAAK,WAE/EwH,GAAU,MACbjH,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,UAE/BzD,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,MAMTR,CAASC,IAAhC,UACE,sBAAKpC,UAAU,kBAAf,UACE,2CACA,uBAAQE,KAAK,OACTyG,UAAQ,EACR3G,UAAU,eACVgD,MAAO3B,EACP4B,SAAU,SAAAb,GAAC,OAAIyD,EAAQzD,EAAEc,OAAOF,aAGtC,sBAAKhD,UAAU,kBAAf,UACE,+CACA,uBACIE,KAAK,SACL6C,IAAI,IACJ/C,UAAU,eACVgD,MAAOrB,EACPsB,SAAU,SAAAb,GAAC,OAAIH,EAAYG,EAAEc,OAAOF,aAG1C,sBAAKhD,UAAU,kBAAf,UACE,8CACA,uBACIE,KAAK,SACL6C,IAAI,IACJ/C,UAAU,eACVgD,MAAOvB,EACPwB,SAAU,SAAAb,GAAC,OAAIF,EAAWE,EAAEc,OAAOF,aAGzC,sBAAKhD,UAAU,kBAAf,UACE,2CACA,8BACE,cAAC,IAAD,CACEA,UAAU,gBACVuF,SAAUnC,EACVH,SAAU,SAAAG,GAAI,OAAIsB,EAAQtB,WAKhC,qBAAKpD,UAAU,aAAf,SACE,uBAAOE,KAAK,SAAS8C,MAAM,WAAWhD,UAAU,6BCrE7C6G,EArED,WAAO,IAAD,EACcnH,mBAAS,IADvB,mBACXpB,EADW,KACDwI,EADC,OAEcpH,mBAAS,IAFvB,mBAEXnB,EAFW,KAEDwI,EAFC,KAiBlB,OACE,8BACE,qBAAK7F,GAAG,qBAAR,SACE,qBAAKlB,UAAU,0CAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,uCACA,uBAAMA,UAAU,OAAOmC,SAnBjC,SAAkBC,GAChBA,EAAEC,iBAGFjC,EAAK4G,MAAM1I,EAAUC,GAAU,SAACF,GAE1BA,IAEFiC,OAAOC,SAASC,KAAO,SAWnB,UACE,sBAAKR,UAAU,qBAAf,UACE,uBACEA,UAAU,oBACVE,KAAK,OACLyG,UAAQ,EACRzF,GAAG,iBACH+F,YAAY,WACZhE,SAAY,SAACb,GAAD,OAAO0E,EAAY1E,EAAEc,OAAOF,UAE1C,uBAAOkE,QAAQ,iBAAf,yBAEF,sBAAKlH,UAAU,gBAAf,UACE,uBACEA,UAAU,oBACVE,KAAK,WACLyG,UAAQ,EACRzF,GAAG,iBACH+F,YAAY,WACZhE,SAAY,SAACb,GAAD,OAAO2E,EAAY3E,EAAEc,OAAOF,UAE1C,uBAAOkE,QAAQ,iBAAf,yBAEF,wBACEhG,GAAG,YACHhB,KAAK,SACLF,UAAU,+BAHZ,sBASF,qBAAKA,UAAU,OAAf,SACE,wDACyB,cAAC,IAAD,CAAMC,GAAG,YAAT,qCCExBkH,EA3DE,WAAO,IAAD,EACWzH,mBAAS,IADpB,mBACdpB,EADc,KACJwI,EADI,OAEWpH,mBAAS,IAFpB,mBAEdnB,EAFc,KAEJwI,EAFI,KAWrB,OACE,8BACI,qBAAK/G,UAAU,0CAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,0CACA,uBAAMA,UAAU,OAAOmC,SAZjC,SAAkBC,GAChBA,EAAEC,iBAGFjC,EAAKgH,SAAS9I,EAAUC,IAQhB,UACE,sBAAKyB,UAAU,qBAAf,UACE,uBACEA,UAAU,oBACVE,KAAK,OACLyG,UAAQ,EACRM,YAAY,WACZhE,SAAY,SAACb,GAAD,OAAO0E,EAAY1E,EAAEc,OAAOF,UAE1C,uBAAOkE,QAAQ,iBAAf,yBAEF,sBAAKlH,UAAU,gBAAf,UACE,uBACEA,UAAU,oBACVE,KAAK,WACLyG,UAAQ,EACRM,YAAY,WACZhE,SAAY,SAACb,GAAD,OAAO2E,EAAY3E,EAAEc,OAAOF,UAE1C,uBAAOkE,QAAQ,iBAAf,yBAEF,wBACEhH,KAAK,SACLF,UAAU,+BAFZ,yBAQF,qBAAKA,UAAU,OAAf,SACE,oBAAGA,UAAU,uBAAb,sCAC2B,cAAC,IAAD,CAAMC,GAAG,SAAT,kC,gBChC1BoH,EAdM,SAAC7H,GAE4BA,EAAxC8H,UAFsB,IAEA7H,EAAkBD,EAAlBC,KAAS8H,EAFT,YAEkB/H,EAFlB,sBAM9B,OAAiC,IAA7BK,OAAOC,KAAKL,GAAMM,OACb,cAAC,IAAD,eAAYwH,IAEZ,cAAC,IAAD,CAAUtH,GAAG,YC4KTuH,G,OAtLC,SAAChI,GAAW,IAAD,EAEGE,mBAAS,IAFZ,mBAEhB+H,EAFgB,KAETC,EAFS,OAGChI,mBAAS,IAHV,mBAGhB2B,EAHgB,KAGVwE,EAHU,OAISnG,mBAAS,GAJlB,mBAIhBiC,EAJgB,KAINM,EAJM,OAKOvC,mBAAS,GALhB,mBAKhB+B,EALgB,KAKPS,EALO,OAMCxC,mBAAS,IANV,mBAMhB0D,EANgB,KAMVsB,EANU,OAOKhF,mBAAS,IAPd,mBAOhBiI,EAPgB,KAORC,EAPQ,OAQWlI,mBAAS,IARpB,mBAQhB6D,EARgB,KAQLsE,EARK,OASiCnI,mBAAS,CAACwB,GAAI,GAAIS,SAAU,EAAGF,QAAS,IATzE,mBAShBqG,EATgB,KASMC,EATN,KAUftI,EAASD,EAATC,KAyDR,SAASuI,EAAoB5E,GACzB,GAAa,KAATA,EAAa,CAEb6E,SAASC,eAAe,2BAA2BC,MAAMC,QAAU,OAEnE,IAAIC,EAAa,IAAI5E,KAAKL,GAI1B,OAHYiF,EAAW1E,WAAa,EAGrB,IAFL0E,EAAWzE,UAEM,IADhByE,EAAW3E,eAyE9B,OAxIAL,qBAAU,WAEN,IAAIwB,GAAe,EAkBjB,OAfEpG,IAAM2F,IAAI,oCAAsC3E,GAC/Cd,MAAK,SAACC,GACDiG,GACA6C,EAAS9I,EAAII,SAGlBE,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAE9BlE,IAAM2F,IAAI,qCAAuC3E,GAChDd,MAAK,SAACC,GACCiG,GACAgD,EAAajJ,EAAII,SAEtBE,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAE3B,WAELkC,GAAe,EACf6C,EAAS,OAIZ,CAACjI,IA8GF,sBAAKO,UAAU,6BAAf,UACI,sBAAKA,UAAU,4CAAf,UACC,oBAAIA,UAAU,mCAAd,iCACA,cAAC,IAAD,CAAMC,GAAG,OAAT,SAAgB,wBAAQD,UAAU,yFAAlB,2BAEjB,sBAAKA,UAAU,8DAAf,UACI,qBAAKA,UAAU,yGAAf,SA/GDyH,EAAM/B,KAAI,SAACtE,GACd,OACI,qBAAKpB,UAAU,WAA0BsI,SAAS,IAAInI,QAAS,kBAoC3E,SAA8Be,EAAIG,EAAMM,EAAUF,EAAS2B,GACvDwE,EAAU1G,GACV2E,EAAQxE,GACRY,EAAYN,GACZO,EAAWT,GACXiD,EAAQtB,GAKZ,SAAyBA,GAGrB,IAAIiF,EAAa,IAAI5E,KAAKL,GACtBI,EAAe,IAAIC,KACnB4E,EAAW3E,cACX2E,EAAW1E,WACX0E,EAAWzE,WAGXC,EAAQN,EAAUO,QAAO,SAACD,GAE1B,IAAIE,EAAY,IAAIN,KAAKI,EAAMT,MAM/B,OALyB,IAAIK,KAC3BM,EAAUL,cACVK,EAAUJ,WACVI,EAAUH,WAEcI,aAAeR,EAAaQ,cAEvD+D,EAAwB,CAAC7G,GAAG2C,EAAM,GAAG5E,IAAK0C,SAAUkC,EAAM,GAAGlC,SAAUF,QAASoC,EAAM,GAAGpC,UAxB5F8G,CAAgBnF,GA1C4DoF,CAAqBpH,EAAKnC,IAAKmC,EAAKC,KAAMD,EAAKO,SAAUP,EAAKK,QAASL,EAAKgC,OAAhJ,SAAwJhC,EAAKC,MAA9HD,EAAKnC,UAgHpC,sBAAKe,UAAU,4BAAf,UACI,sBAAKA,UAAU,wFAAf,UACI,oBAAIA,UAAU,4CAAd,6BACA,sBAAKA,UAAU,uDAAuDkB,GAAG,0BAAzE,UAEI,cAAC,IAAD,CAAMjB,GAAI,SAAW0H,EAAQrG,MAAO,CAAEJ,GAAIyG,EAAQpG,aAAcuG,EAAqBrG,QAASC,cAAeoG,EAAqBnG,SAAUC,cAAekG,EAAqB5G,IAAhL,SACI,wBAAQlB,UAAU,kHAAlB,oBAGJ,wBACIA,UAAU,gGACVG,QAAS,kBArDvC,WACE1B,IAAMkG,OAAO,+BAAiCgD,GAAQzI,OAAM,SAACyD,GAAD,OAAWC,QAAQC,IAAIF,MAEnF,IAAIF,EAAc,KAClBhE,IAAM2F,IAAI,gCAAkC0D,EAAqB5G,IAAIvC,MAAK,SAAAC,IACxE6D,EAAc7D,EAAII,MAEN2C,UAAYA,EACxBc,EAAYhB,SAAWA,EAEvBhD,IAAMC,KAAK,uCAAyCoJ,EAAqB5G,GAAIuB,GAC1E9D,MAAK,WAEA,IAAI8J,EAAkBhB,EAAM3D,QAAO,SAAC1C,GAClC,OAAOA,EAAKnC,MAAQ0I,KAGxBD,EAASe,GAET5C,EAAQ,IACR5D,EAAY,GACZC,EAAW,GACXwC,EAAQ,OAEXxF,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,SAE7BzD,OAAM,SAAAyD,GAAK,OAAIC,QAAQC,IAAIF,MA2Bad,IAFnB,0BAjHhB,sBAAK7B,UAAU,uBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,mBAAGA,UAAU,qBAAb,mBACA,4BAAIqB,OAER,2CAAcM,KACd,0CAAaF,EAAb,QACA,6CAAgBuG,EAAoB5E,oBClDrC,SAASsF,IAAO,IAAD,EACHhJ,mBAAS,IADN,mBACrBD,EADqB,KACdkJ,EADc,OAEEjJ,oBAAS,GAFX,mBAErBkJ,EAFqB,KAEZC,EAFY,KAc5B,OATAxF,qBAAU,WACJvE,aAAa4D,QAAQ,UACvBiG,EAAQ7J,aAAa4D,QAAQ,UAG/BmG,GAAW,KACV,IAGCD,EAEA,qBAAK1H,GAAG,eAAR,SACE,qBAAKlB,UAAU,8BAA8BkB,GAAG,UAAU4H,KAAK,SAA/D,SACE,sBAAM9I,UAAU,gBAOpB,8BACE,cAAC,IAAD,UACE,eAAC,WAAD,WAEA,cAAC,EAAD,CAAQP,KAAMA,IAGd,eAAC,IAAD,WAGE,eAAC,IAAD,CAAOsJ,KAAK,IAAIC,QAAS,cAAC,EAAD,CAAcvJ,KAAMA,IAA7C,UACE,cAAC,IAAD,CAAOsJ,KAAK,IAAIC,QAAS,cAAC,EAAD,CAAWvJ,KAAMA,MAC1C,cAAC,IAAD,CAAOsJ,KAAK,YAAYC,QAAS,cAAC,EAAD,CAAUvJ,KAAMA,MACjD,cAAC,IAAD,CAAOsJ,KAAK,OAAOC,QAAS,cAAC,EAAD,CAASvJ,KAAMA,MAC3C,cAAC,IAAD,CAAOsJ,KAAK,WAAWC,QAAS,cAAC,EAAD,CAASvJ,KAAMA,SAKjD,cAAC,IAAD,CAAOsJ,KAAK,YAAYC,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,gBC5D1C,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxK,MAAK,YAAkD,IAA/CyK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Be,K","file":"static/js/main.cf16df6c.chunk.js","sourcesContent":["import axios from 'axios';\r\n//This singleton class is used to authenticate the user\r\n\r\nclass Auth {\r\n    constructor() {\r\n        this.isAuthenticated = false;\r\n    }\r\n\r\n    login(username, password, callback) {\r\n      //first we need to make a request to the server to see if we can login the user\r\n        axios.post(\"http://localhost:5000/users/login\", { username, password })\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            //if the user is authenticated, we store the token in local storage\r\n            localStorage.setItem(\"token\", res.data._id);\r\n            this.isAuthenticated = true;\r\n            //and we call the callback function that is called when user submits login form\r\n            callback(this.isAuthenticated);\r\n          } \r\n        })\r\n        .catch((err) => {\r\n          alert(\"Incorrect username or password\");\r\n        });\r\n\r\n    }\r\n\r\n    logout(callback) {\r\n      //we remove the token from local storage to logout the user\r\n        localStorage.removeItem(\"token\");\r\n        this.isAuthenticated = false;\r\n\r\n      //callback function is called when user clicks logout button and it is handled by the navbar component\r\n        callback();\r\n    }\r\n\r\n    register(username, password) {\r\n      //first we need to make a request to the server to see if we can register the user\r\n        axios.post(\"http://localhost:5000/users/register\", { username, password })\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            alert(\"You have successfully registered! Please sign in\");\r\n            this.registerSuccess = true;\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          alert(\"Username and/or password is already taken\");\r\n        });\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return this.isAuthenticated;\r\n    }\r\n}\r\n\r\nexport default new Auth();","import React, { useState } from \"react\";\r\nimport { Transition } from \"@headlessui/react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FaBars, FaTimesCircle } from \"react-icons/fa\";\r\nimport Auth from \"../auth.js\";\r\n\r\n//a lot of code below is from https://dev.to/prnvbirajdar/the-easiest-way-to-build-a-responsive-navbar-using-tailwind-react-2803. this allowed me to make the navbar responsive\r\n\r\nfunction Navbar(props) {\r\n  let { user } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  //user is an object we got from props \r\n  //if user object is not empty then we will show the navbar for logged in users\r\n  if (Object.keys(user).length !== 0) {\r\n    return (\r\n      <div>\r\n        <nav className=\"bg-blue-600 sm:text-white\">\r\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n            <div className=\"flex items-center justify-between h-16\">\r\n              <div className=\"flex items-center w-full justify-between\">\r\n                <div className=\"flex-shrink-0\">\r\n                  <Link\r\n                    className=\"font-bold text-xl cursor-pointer text-white no-underline inline-flex\"\r\n                    to=\"/\"\r\n                  >\r\n                    mynutritionpal\r\n                  </Link>\r\n                </div>\r\n                <div className=\"hidden md:block\">\r\n                  <div className=\"ml-10 flex items-baseline space-x-4\">\r\n                    <Link\r\n                      className=\"hover:bg-blue-700 text-white px-3 py-2 rounded-md text-md font-medium no-underline\"\r\n                      to=\"/\"\r\n                    >\r\n                      Food Diary\r\n                    </Link>\r\n\r\n                    <Link\r\n                      className=\"hover:bg-blue-700 text-white px-3 py-2 rounded-md text-md font-medium no-underline\"\r\n                      to=\"/myfoods\"\r\n                    >\r\n                      My Foods\r\n                    </Link>\r\n\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"bg-gray-300 text-black rounded-md px-3 py-2 uppercase\"\r\n                      onClick={() => {\r\n                        Auth.logout(() => {\r\n                          window.location.href = \"/\";\r\n                        });\r\n                      }}\r\n                    >\r\n                      Log Out\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"-mr-2 flex md:hidden\">\r\n                <button\r\n                  onClick={() => setIsOpen(!isOpen)}\r\n                  type=\"button\"\r\n                  className=\"bg-gray-700 inline-flex items-center justify-center p-2 rounded-md text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\"\r\n                  aria-controls=\"mobile-menu\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  {/* if navbar was not open, we show the hamburger,otherwise it is open so show the X */}\r\n                  {!isOpen ? (\r\n                    <FaBars />\r\n                  ) : (\r\n                    <FaTimesCircle />\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Transition below contains the navbar menu in mobile view. It is gotten from\r\n          https://dev.to/prnvbirajdar/the-easiest-way-to-build-a-responsive-navbar-using-tailwind-react-2803*/}\r\n          <Transition\r\n            show={isOpen}\r\n            enter=\"transition ease-out duration-100 transform\"\r\n            enterFrom=\"opacity-0 scale-95\"\r\n            enterTo=\"opacity-100 scale-100\"\r\n            leave=\"transition ease-in duration-75 transform\"\r\n            leaveFrom=\"opacity-100 scale-100\"\r\n            leaveTo=\"opacity-0 scale-95\"\r\n          >\r\n            {() => (\r\n              <div className=\"md:hidden\" id=\"mobile-menu\">\r\n                <div className=\"px-2 pb-3 space-y-1\">\r\n                  <Link\r\n                    className=\"block  hover:bg-blue-700 text-white px-3 py-2 rounded-md text-base font-medium no-underline\"\r\n                    to=\"/\"\r\n                    onClick={() => setIsOpen(!isOpen)}\r\n                  >\r\n                    Food Diary\r\n                  </Link>\r\n\r\n                  <Link\r\n                    className=\"block  hover:bg-blue-700 text-white px-3 py-2 rounded-md text-base font-medium no-underline\"\r\n                    to=\"/myfoods\"\r\n                    onClick={() => setIsOpen(!isOpen)}\r\n                  >\r\n                    My Foods\r\n                  </Link>\r\n                  <button\r\n                      type=\"button\"\r\n                      className=\"block  hover:bg-blue-700 w-full text-white px-3 text-left py-2 rounded-md text-base font-medium no-underline\"\r\n                      onClick={() => {\r\n                        Auth.logout(() => {\r\n                          window.location.href = \"/\";\r\n                        });\r\n                      }}\r\n                    >\r\n                      Log Out\r\n                    </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Transition>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }else {\r\n    //user is not logged in so we just show a login button \r\n    return (\r\n      <div>\r\n        <nav className=\"flex justify-between items-center bg-blue-600 p-2 text-white\">\r\n          <div className=\"font-bold text-xl cursor-pointer mx-6\">\r\n            <Link className=\"text-white no-underline\" to=\"/\">\r\n              mynutritionpal\r\n            </Link>\r\n          </div>\r\n  \r\n          <ul className=\"sm:flex flex:1 justify-end items-center text-sm uppercase gap-12 mb-0\">\r\n            <li className=\"cursor-pointer\">\r\n              <Link className=\"text-white no-underline\" to=\"/login\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"bg-gray-200 text-black rounded-md px-3 py-2 uppercase\"\r\n                >\r\n                  Log In\r\n                </button>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n  \r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { FaPencilAlt, FaTrash } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//this Food component will contain the name of the food along with edit+delete buttons for each food\r\nconst Food = (props) => (\r\n  <tr className=\"bg-gray-200\">\r\n \r\n    <td className=\"border border-white group\">\r\n      {props.food.name}{\" \"}\r\n      <Link to={\"/edit/\" + props.food._id} state={{ id: props.food._id, totalProtein: props.totals.protein, totalCalories: props.totals.calories, totalObjectID: props.totals.id }}>\r\n        <FaPencilAlt className=\"inline text-gray-200 group-hover:text-blue-800 mr-5\" />\r\n      </Link>\r\n      <FaTrash\r\n        onClick={() => {\r\n          props.deleteFood(props.food._id, props.food.calories, props.food.protein);\r\n        }}\r\n        className=\"cursor-pointer inline text-gray-200 group-hover:text-blue-800\"\r\n      />\r\n    </td>\r\n    <td className=\"border border-white text-center\">{props.food.calories}</td>\r\n    <td className=\"border border-white text-center\">{props.food.protein}</td>\r\n  </tr>\r\n);\r\n\r\nexport default Food;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport '../styles/foodDiary.css';\r\n\r\n//modal below is a component from tailwind css\r\nexport default function QuickAddModal(props) {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [calories, setCalories] = useState(0);\r\n  const [protein, setProtein] = useState(0);\r\n  \r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    const newTotalCalories = props.totalCalories + parseInt(calories);\r\n    const newTotalProtein = props.totalProtein + parseInt(protein);\r\n\r\n    //create a total object with the new total calories and protein\r\n    let totalObject = {\r\n      calories: newTotalCalories,\r\n      protein: newTotalProtein\r\n    }; \r\n\r\n    //update the total object in the database with the new total object\r\n    axios.post(\"http://localhost:5000/totals/update/\" + localStorage.getItem('totalID'), totalObject)\r\n          .catch((error) => console.log(error));\r\n    \r\n    //the props contain the setTotal hook that updates the totals so we will use that to update the totals\r\n    props.setTotals({ calories: newTotalCalories, protein: newTotalProtein });\r\n\r\n    //reset the states\r\n    setCalories(0);\r\n    setProtein(0);\r\n    //hide the modal\r\n    setShowModal(false);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    {/* div below is the quick add button on main page */}\r\n      <div className=\"smaller-text text-sm sm:text-base inline-block cursor-pointer ml-2 text-blue-600 font-semibold\"  onClick={() => setShowModal(true)}>Quick Add</div>\r\n      {showModal ? (\r\n        <>\r\n          <div\r\n            className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\"\r\n          >\r\n            <div className=\"relative w-4/5 my-6 mx-auto sm:w-auto max-w-3xl\">\r\n              {/*content*/}\r\n              <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\r\n                {/*header*/}\r\n                <div className=\"flex items-start justify-between p-4 border-b border-solid border-blueGray-200 rounded-t\">\r\n                  <h3 className=\"text-3xl font-semibold\">\r\n                    Quick Add\r\n                  </h3>\r\n                  <button\r\n                    className=\"p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    <span className=\"bg-transparent text-black opacity-5 h-6 w-6 text-2xl block outline-none focus:outline-none\">\r\n                      ×\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n                {/*body*/}\r\n                <div className=\"relative p-6 flex-auto mx-7\">\r\n                \r\n                {/* form below is the form for quick add */}\r\n                <form className=\"sm:w-80\" onSubmit={(e) => onSubmit(e)}>\r\n         \r\n                    <div className=\"form-group mt-2 flex justify-between items-center\">\r\n                      <label className=\"text-lg sm:text-xl\">Calories: </label>\r\n                      <input \r\n                          type=\"number\" \r\n                          min=\"0\"\r\n                          className=\"form-control quick-add-input\"\r\n                          value={calories}\r\n                          onChange={e => setCalories(e.target.value)}\r\n                          />\r\n                    </div>\r\n                    <div className=\"form-group mt-2 flex justify-between items-center\">\r\n                      <label className=\"text-lg sm:text-xl\">Protein: </label>\r\n                      <input \r\n                          type=\"number\" \r\n                          min=\"0\"\r\n                          className=\"form-control quick-add-input\"\r\n                          value={protein}\r\n                          onChange={e => setProtein(e.target.value)}\r\n                          />\r\n                    </div>\r\n\r\n                </form>\r\n                </div>\r\n                {/*footer*/}\r\n                <div className=\"flex items-center justify-end p-6 border-t border-solid border-blueGray-200 rounded-b\">\r\n                  <button\r\n                    className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setShowModal(false)\r\n                      setCalories(0)\r\n                      setProtein(0)\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                  <button\r\n                    className=\"bg-blue-500 text-white active:bg-blue-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\r\n                    type=\"button\"\r\n                    onClick={(e) => onSubmit(e)}\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}","import React, {useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport \"../styles/foodDiary.css\"\r\nconst TotalsTable = (props) => {\r\n    const food = props.food;\r\n    const date = props.date;\r\n    const user = props.user;\r\n    \r\n    useEffect(() => {\r\n        //function that will be called when the component is mounted and when we fetch Total objects from the database\r\n        function updateTotals(date, allTotals, user) {\r\n             \r\n            //convert selected date into a different format\r\n            let selectedDate = new Date(\r\n             date.getFullYear(),\r\n             date.getMonth(),\r\n             date.getDate()\r\n           ); \r\n         \r\n           //filter totals by date and return an array of totals that are of the same date as the selected date\r\n           let total = allTotals.filter((total) => {\r\n             //filter every food by date\r\n             let totalDate = new Date(total.date); //convert the MongoDB ISON date format into javascript date format\r\n             var formattedTotalDate = new Date(\r\n               totalDate.getFullYear(),\r\n               totalDate.getMonth(),\r\n               totalDate.getDate()\r\n             ); \r\n             return formattedTotalDate.toString() === selectedDate.toString(); //returns array after formatting to string\r\n            });\r\n\r\n            //create a totalObject that we will return\r\n            let totalObject = {\r\n                id: '',\r\n                calories: 0,\r\n                protein: 0,\r\n            }\r\n\r\n             //if there is a total for the selected date, first store the total object's id in local storage\r\n            if (total.length > 0) {\r\n                localStorage.setItem(\"totalID\", total[0]._id);\r\n                //then update the total object that we will return to the component\r\n                totalObject.id = total[0]._id;\r\n                totalObject.calories = total[0].calories;\r\n                totalObject.protein = total[0].protein;\r\n            }else {\r\n                createTotalIfDoesNotExist(date, user);\r\n            }\r\n          \r\n            return totalObject;\r\n         \r\n        }\r\n    \r\n        //when the component mounts, we will fetch all totals from the database\r\n        axios.get(\"http://localhost:5000/totals/user/\" + user)\r\n        .then((res) => {\r\n          let allTotals = res.data;\r\n          let totalsForToday = updateTotals(date, allTotals, user);\r\n\r\n          //update the totals in the state using the passed in prop of setTotals\r\n          props.setTotals(totalsForToday);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }, [props, date, user, food]);\r\n\r\n   \r\n    //function that will create a total object if one does not exist for the selected date\r\n    function createTotalIfDoesNotExist(date, user) {\r\n        //if there is no total for the selected date, create one\r\n        const total = {\r\n            userID: user,\r\n            calories: 0,\r\n            protein: 0,\r\n            date: date\r\n        }\r\n        //send the total object to the database\r\n        axios.post(\"http://localhost:5000/totals/add\", total).then((res) => {\r\n            //after sending to the database, get the total id from the response\r\n            const totalID = res.data._id;\r\n            //store the total id in local storage\r\n            localStorage.setItem(\"totalID\", totalID);\r\n        }).catch((error) => console.log(error));\r\n    }\r\n\r\n    return (\r\n        //we use react fragments to return a list of elements instead of wrapping it into a parent div\r\n        <React.Fragment>\r\n            <tr >\r\n            <td className=\"text-right text-lg font-bold\">\r\n            <div className=\"mr-3\">Totals:</div>\r\n            </td>\r\n            {/* render total cals */}\r\n            <td className=\"border border-white bg-gray-200 text-center font-bold text-green-600\">{props.totalCalories}</td>\r\n            {/* render total protein */}\r\n            <td className=\"border border-white bg-gray-200 text-center font-bold text-green-600\">{props.totalProtein}</td>\r\n        </tr>\r\n        <tr>\r\n            <th className=\"w-8/12\"></th>\r\n            <th className=\"text-sm sm:text-base border border-white bg-blue-600 text-center text-white\">\r\n            Calories (kcal)\r\n            </th>\r\n            <th className=\"text-sm sm:text-base border border-white bg-blue-600 text-center text-white\">\r\n            Protein (g)\r\n            </th>\r\n        </tr>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default TotalsTable;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FaCaretSquareLeft, FaCaretSquareRight } from \"react-icons/fa\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Food from \"./Food.js\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport QuickAddModal from \"./QuickAddModal.js\";\r\nimport '../styles/foodDiary.css';\r\nimport TotalsTable from \"./TotalsTable.js\";\r\nconst FoodDiary = (props) => {\r\n\r\n  const [foodToShow, setFoodToShow] = useState([]);\r\n  const [date, setDate] = useState(new Date());\r\n  const [totals, setTotals] = useState({id: '', calories: 0, protein: 0});\r\n  const { user } = props;\r\n\r\n  useEffect(() => {\r\n    // clean up controller when component unmounts. This prevents memory leaks\r\n    let isSubscribed = true;\r\n\r\n      //when page loads, get all foods and totals from database\r\n        axios.get(\"http://localhost:5000/foods/user/\" + user)\r\n        .then((res) => {\r\n          if (isSubscribed) {\r\n            let allFood = res.data;\r\n            //after getting all food, update the list of foods and total calories and protein \r\n            updateFoodList(date, allFood, user);\r\n          }\r\n        })\r\n        .catch((error) => console.log(error));\r\n    \r\n      return () => {\r\n        //clean up\r\n        isSubscribed = false\r\n        setFoodToShow([]);\r\n        \r\n      };\r\n      //dependency: date because we want to update page whenever the selected date changes. useEffect is called when date changes\r\n  }, [date, user]); \r\n \r\n  //whenever user goes back a day, update the date\r\n  function decreaseDate() {\r\n    let currentDate = date;\r\n    //subtract a day from the date\r\n    let newDate = currentDate.setDate(currentDate.getDate() - 1);\r\n    setDate(new Date(newDate));\r\n  }\r\n  //whenever user goes forward a day, update the date\r\n  function increaseDate() {\r\n    let currentDate = date;\r\n    //add a day to the date\r\n    let newDate = currentDate.setDate(currentDate.getDate() + 1);\r\n    setDate(new Date(newDate));\r\n  }\r\n\r\n  //when user clicks on trashcan icon on food, delete food from database\r\n  function deleteFood(id, calories, protein) {\r\n    axios.delete(\"http://localhost:5000/foods/\" + id).catch((error) => console.log(error));\r\n    //after deleting food, update totals by first getting the Total object from the database\r\n    let totalObject = null;\r\n    axios.get('http://localhost:5000/totals/' + localStorage.getItem('totalID')).then(res => {\r\n      totalObject = res.data;\r\n      //then update the totals by subtracting the calories and protein from the food deleted\r\n      totalObject.calories -= calories;\r\n      totalObject.protein -= protein;\r\n      //then update the total object in the database\r\n      axios.post('http://localhost:5000/totals/update/' + localStorage.getItem('totalID'), totalObject)\r\n        .then(() => {\r\n           //remove food from foods displayed state and update the frontend\r\n            let newList = foodToShow.filter((food) => food._id !== id);\r\n            setFoodToShow(newList);\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n    }).catch(error => console.log(error));\r\n\r\n  }\r\n\r\n  //this is called when page is rendered. It will update the list of foods and choose which foods to display\r\n  function updateFoodList(date, allFood, user) {\r\n    \r\n    //convert user selected date into a different format\r\n    let selectedDate = new Date(\r\n      date.getFullYear(),\r\n      date.getMonth(),\r\n      date.getDate()\r\n    ); \r\n\r\n    //filter food by date and return an array of foods that are of the same date as the selected date\r\n    let foodList = allFood.filter((food) => {\r\n      //filter every food by date\r\n      let foodDate = new Date(food.date); //convert the MongoDB ISON date format into javascript date format\r\n      var formattedFoodDate = new Date(\r\n        foodDate.getFullYear(),\r\n        foodDate.getMonth(),\r\n        foodDate.getDate()\r\n      ); \r\n      return formattedFoodDate.toString() === selectedDate.toString(); //returns array after formatting to string\r\n    });\r\n\r\n    //set foods to show to the filtered array\r\n    setFoodToShow(foodList);\r\n    return foodList;\r\n  }\r\n\r\n  //whenever page is rendered, display the food for the selected day\r\n  function displayFood() {\r\n    //get the food we want to display from the state\r\n    let foodList = foodToShow;\r\n    //display the food by mapping all items in the food list to a Food component\r\n    return foodList.map((currentFood) => {\r\n      //returns all food for the selected date\r\n      return (\r\n        //each food is a component that is rendered\r\n        <Food\r\n          food={currentFood}\r\n          deleteFood={deleteFood}\r\n          key={currentFood._id}\r\n          totals={totals}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"container my-8\">\r\n      <div className=\"flex flex-col sm:flex-row items-center justify-center\">\r\n        <div className=\"text-base\">Your Food Diary For:</div>\r\n        <div className=\"flex ml-3 datepicker-arrows\">\r\n          {/* left arrow icon that allows user to go back one day */}\r\n          <FaCaretSquareLeft\r\n            size={30}\r\n            color={\"blue\"}\r\n            className=\"cursor-pointer\"\r\n           \r\n            id=\"left-arrow\"\r\n            onClick={() => decreaseDate()}\r\n          />\r\n          {/* bar between arrows with the current selected date */}\r\n          <DatePicker\r\n            className=\"flex items-center justify-center bg-blue-600 rounded-sm mt-0.5 text-white text-base\"\r\n            selected={date}\r\n            onChange={(date) => setDate(date)}\r\n            id=\"date-picker\"\r\n            dateFormat=\"EEEE, MMMM d\"\r\n          />\r\n          {/* right arrow icon that allows user to go back one day */}\r\n          <FaCaretSquareRight\r\n            size={30}\r\n            color={\"blue\"}\r\n            className=\"cursor-pointer\"\r\n            id=\"right-arrow\"\r\n            onClick={() => increaseDate()}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n    {/* div below is the table with containing food, calories, protein */}\r\n      <div className=\"mt-5\">\r\n        <table className=\"mx-auto w-4/5 sm:w-3/4 border-collapse\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"w-10/12 sm:w-8/12\"></th>\r\n              <th className=\"text-sm sm:text-base border border-white bg-blue-600 text-center text-white\">\r\n                Calories (kcal)\r\n              </th>\r\n              <th className=\"text-sm sm:text-base border border-white bg-blue-600 text-center text-white\">\r\n                Protein (g)\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          {/* body of table holds all of the food. the method displayFood() handles the mapping from array to the row, and the Food component handles styling*/}\r\n          <tbody>{displayFood()}</tbody>\r\n          <tbody>\r\n          {/* row below is the Add Food | Quick Add links. This row has padding bottom to create space between next row  */}\r\n            <tr className=\"spaceUnder\">\r\n              <td className=\"w-5\"> \r\n                <Link className=\"smaller-text text-sm sm:text-base mr-2 text-blue-600 font-semibold no-underline\" to={\"/add\"}  state={{ date }}>Add Food</Link>\r\n                {\"  |  \"}\r\n                <QuickAddModal setTotals={setTotals} totalCalories={totals.calories} totalProtein={totals.protein}/>\r\n              </td>\r\n            </tr>\r\n           <TotalsTable food={foodToShow} date={date} user={user} setTotals={setTotals} totalCalories={totals.calories} totalProtein={totals.protein}/>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FoodDiary;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nconst EditFood = (props) => {\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [calories, setCalories] = useState(0);\r\n  const [protein, setProtein] = useState(0);\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  //we will use this to reference the oldCalories and oldProtein values\r\n  const oldCaloriesRef = useRef(0);\r\n  const oldProteinRef = useRef(0);\r\n  const oldDateRef = useRef(new Date());\r\n  //get the id, totalCalories of Total object, and totalProtein of Total object from the passed in props\r\n  const { state } = useLocation();\r\n  const { id, totalCalories, totalProtein, totalObjectID } = state;\r\n\r\n  const { user } = props;\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchFoodData = () => {\r\n      axios.get(\"http://localhost:5000/foods/\" + id)\r\n        .then((res) => {\r\n          setName(res.data.name);\r\n          setCalories(res.data.calories);\r\n          setProtein(res.data.protein);\r\n          setDate(new Date(res.data.date));\r\n          //after filling in the input forms with the data from the database, we will store the oldCalories and oldProtein values in the refs\r\n          oldCaloriesRef.current = res.data.calories;\r\n          oldProteinRef.current = res.data.protein;\r\n          oldDateRef.current = new Date(res.data.date);\r\n        });\r\n      \r\n    };\r\n    fetchFoodData();\r\n  }, [id]);\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n     //when we submit the form, we will first create a new food object with the updated values\r\n     const food = {\r\n      name,\r\n      calories: calories,\r\n      protein: protein,\r\n      date: date,\r\n    };\r\n\r\n    //then we will update the foods object in the database with the new food object\r\n    axios.post(\"http://localhost:5000/foods/update/\" + id, food).catch((error) => console.log(error));\r\n\r\n    //if the user changed the date, we will update totals and food based on that change\r\n    if (oldDateRef.current.getTime() !== date.getTime()) {\r\n      updateTotalsOnDateChange();\r\n    }else {\r\n      updateTotalsIfDateDidNotChange();\r\n    }\r\n\r\n  }\r\n\r\n  function updateTotalsOnDateChange() {\r\n    //first update the total object from the database for the old date. \r\n    let totalObject = {\r\n      calories: totalCalories - oldCaloriesRef.current,\r\n      protein: totalProtein - oldProteinRef.current,\r\n    };\r\n    //update the total object in the database with the new total object\r\n    axios.post('http://localhost:5000/totals/update/' + totalObjectID, totalObject).then(()=> {\r\n          //after editing food and updating the total for the old date, we will update the total object for the new date\r\n          //first get the total object from the database for the new date by finding the right total object for the user\r\n          axios.get('http://localhost:5000/totals/user/' + user).then(res => {\r\n          \r\n            //convert selected date into a different format\r\n            let selectedDate = new Date(\r\n             date.getFullYear(),\r\n             date.getMonth(),\r\n             date.getDate()\r\n           ); \r\n         \r\n           //filter totals by date and return an array of totals that are of the same date as the selected date\r\n           let total = res.data.filter((total) => {\r\n             //filter every food by date\r\n             let totalDate = new Date(total.date); //convert the MongoDB ISON date format into javascript date format\r\n             var formattedTotalDate = new Date(\r\n               totalDate.getFullYear(),\r\n               totalDate.getMonth(),\r\n               totalDate.getDate()\r\n             ); \r\n             return formattedTotalDate.toString() === selectedDate.toString(); //returns array after formatting to string\r\n            });\r\n            let totalObjectID;\r\n           //if the total array is empty, then we need to create a new total object for that date\r\n            if (total.length === 0) {\r\n                totalObject = {\r\n                    userID: user,\r\n                    calories: calories,\r\n                    protein: protein,\r\n                    date: date\r\n                }\r\n                //add the new total object to the database and then return to previous page\r\n                axios.post('http://localhost:5000/totals/add', totalObject).then(() =>  navigate(-1)).catch(error => console.log(error));\r\n            }else { //if the total array is not empty, then we need to update the local object holding the totals\r\n              totalObject = {\r\n                calories: total[0].calories,\r\n                protein: total[0].protein,\r\n              }\r\n              //get the total object ID from the database that we will use for endpoint\r\n              totalObjectID = total[0]._id;\r\n              //update the total object to include the new food object's values\r\n              totalObject.calories += parseInt(calories, 10);\r\n              totalObject.protein += parseInt(protein, 10);\r\n              //then update the total object in the database\r\n              axios.post('http://localhost:5000/totals/update/' + totalObjectID, totalObject).then(() => {\r\n                    //after adding food and udpating total, return to previous page\r\n                    navigate(-1)\r\n              }).catch(error => console.log(error));\r\n            }\r\n          }).catch(error => console.log(error));\r\n    }).catch(error => console.log(error));\r\n  }\r\n\r\n  function updateTotalsIfDateDidNotChange() {\r\n      \r\n    //calculate the new totalCalories and totalProtein values by finding the differences in values\r\n    const caloriesDifference = parseInt(calories, 10) - oldCaloriesRef.current;\r\n    const proteinDifference = parseInt(protein, 10) - oldProteinRef.current;\r\n\r\n    //create a new total object with the new totalCalories and totalProtein values\r\n    const totalObject = {\r\n      calories: totalCalories + caloriesDifference,\r\n      protein: totalProtein + proteinDifference,\r\n    };\r\n\r\n\r\n    //update the total object in the database with the new total object\r\n    axios.post('http://localhost:5000/totals/update/' + totalObjectID, totalObject).then(()=> {\r\n          //after editing food and updating the total, return to home page\r\n          navigate(-1)\r\n    }).catch(error => console.log(error));\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3 className=\"mt-4\">Edit Food</h3>\r\n      <form onSubmit={(e) => onSubmit(e)}>\r\n        <div className=\"form-group mt-4\">\r\n          <label>Name: </label>\r\n          <input\r\n            type=\"text\"\r\n            required\r\n            className=\"form-control\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <label>Calories: </label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0\"\r\n            className=\"form-control\"\r\n            value={calories}\r\n            onChange={(e) => setCalories(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <label>Protein: </label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0\"\r\n            className=\"form-control\"\r\n            value={protein}\r\n            onChange={(e) => setProtein(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-2\">\r\n          <label>Date: </label>\r\n          <div>\r\n            <DatePicker\r\n              className=\"mb-4 border-4\"\r\n              selected={date}\r\n              onChange={(date) => setDate(date)}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Edit Food\"\r\n            className=\"btn btn-primary\"\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditFood;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nconst AddFood = (props) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [calories, setCalories] = useState(0);\r\n    const [protein, setProtein] = useState(0);\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    //get the selected date passed in from state in the parent component\r\n    const { state } = useLocation();\r\n    const navigate = useNavigate();\r\n  \r\n    //useEffect to prevent infinite loop when setting the date if state exists\r\n    useEffect(() => {\r\n        //there would only be a state if the user accesses this page from FoodDiary. Otherwise, they accessed it \r\n        //from MyFoods or URL\r\n        if (state) {\r\n          setDate(state.date);\r\n        }\r\n\r\n    }, [state])\r\n    \r\n    const { user } = props;\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //create new food object to send to database with the information for the input fields that are stored in state\r\n        const food = {\r\n            userID: user,\r\n            name,\r\n            calories: calories,\r\n            protein: protein,\r\n            date: date\r\n        }\r\n        \r\n        //add the new food object to the database\r\n        axios.post('http://localhost:5000/foods/add', food).catch(error => console.log(error));\r\n        \r\n        //we now have to update the total object in the database with the new food object's values\r\n        //first get the total object from the database for the user\r\n        let totalObject = null; \r\n       \r\n        axios.get('http://localhost:5000/totals/user/' + user).then(res => {\r\n          \r\n            //convert selected date into a different format\r\n            let selectedDate = new Date(\r\n             date.getFullYear(),\r\n             date.getMonth(),\r\n             date.getDate()\r\n           ); \r\n         \r\n           //filter totals by date and return an array of totals that are of the same date as the selected date\r\n           let total = res.data.filter((total) => {\r\n             //filter every food by date\r\n             let totalDate = new Date(total.date); //convert the MongoDB ISON date format into javascript date format\r\n             var formattedTotalDate = new Date(\r\n               totalDate.getFullYear(),\r\n               totalDate.getMonth(),\r\n               totalDate.getDate()\r\n             ); \r\n             return formattedTotalDate.toString() === selectedDate.toString(); //returns array after formatting to string\r\n            });\r\n            let totalObjectID;\r\n           //if the total array is empty, then we need to create a new total object for that date\r\n            if (total.length === 0) {\r\n                totalObject = {\r\n                    userID: user,\r\n                    calories: food.calories,\r\n                    protein: food.protein,\r\n                    date: date\r\n                }\r\n                //add the new total object to the database and then return to previous page\r\n                axios.post('http://localhost:5000/totals/add', totalObject).then(() =>  navigate(-1)).catch(error => console.log(error));\r\n            }else { //if the total array is not empty, then we need to update the local object holding the totals\r\n              totalObject = {\r\n                calories: total[0].calories,\r\n                protein: total[0].protein,\r\n              }\r\n              //get the total object ID from the database that we will use for endpoint\r\n              totalObjectID = total[0]._id;\r\n              //update the total object to include the new food object's values\r\n              totalObject.calories += parseInt(food.calories, 10);\r\n              totalObject.protein += parseInt(food.protein, 10);\r\n              //then update the total object in the database\r\n              axios.post('http://localhost:5000/totals/update/' + totalObjectID, totalObject).then(() => {\r\n                    //after adding food and udpating total, return to previous page\r\n                    navigate(-1)\r\n              }).catch(error => console.log(error));\r\n            }\r\n          }).catch(error => console.log(error));\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <h3 className=\"mt-4\" >Add Food</h3>\r\n        <form onSubmit={(e) => onSubmit(e)}>\r\n          <div className=\"form-group mt-4\"> \r\n            <label>Name: </label>\r\n            <input  type=\"text\"\r\n                required\r\n                className=\"form-control\"\r\n                value={name}\r\n                onChange={e => setName(e.target.value)}\r\n                />\r\n          </div>\r\n          <div className=\"form-group mt-2\">\r\n            <label>Calories: </label>\r\n            <input \r\n                type=\"number\" \r\n                min=\"0\"\r\n                className=\"form-control\"\r\n                value={calories}\r\n                onChange={e => setCalories(e.target.value)}\r\n                />\r\n          </div>\r\n          <div className=\"form-group mt-2\">\r\n            <label>Protein: </label>\r\n            <input \r\n                type=\"number\" \r\n                min=\"0\"\r\n                className=\"form-control\"\r\n                value={protein}\r\n                onChange={e => setProtein(e.target.value)}\r\n                />\r\n          </div>\r\n          <div className=\"form-group mt-2\">\r\n            <label>Date: </label>\r\n            <div>\r\n              <DatePicker\r\n                className=\"mb-4 border-4\"\r\n                selected={date}\r\n                onChange={date => setDate(date)}\r\n              />\r\n            </div>\r\n          </div>\r\n  \r\n          <div className=\"form-group\">\r\n            <input type=\"submit\" value=\"Add Food\" className=\"btn btn-primary\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default AddFood;","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Auth from \"../auth.js\";\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  \r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    //when the user submits the form, we want to log them in using the Auth class\r\n    Auth.login(username, password, (isAuthenticated) => {\r\n      //after attempting to log them in, we want to check if they are authenticated\r\n      if (isAuthenticated) {\r\n        //if they are authenticated, we want to redirect them to the home page\r\n        window.location.href = \"/\";\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"login_register_bar\">\r\n        <div className=\"container d-flex justify-content-evenly\">\r\n          <div className=\"login w-50 mt-5\">\r\n            <h2>Login</h2>\r\n            <form className=\"mt-3\" onSubmit={onSubmit}>\r\n              <div className=\"form-floating mt-2\">\r\n                <input\r\n                  className=\"form-control mb-3\"\r\n                  type=\"text\"\r\n                  required\r\n                  id=\"username_login\"\r\n                  placeholder=\"Username\"\r\n                  onChange = {(e) => setUsername(e.target.value)}\r\n                />\r\n                <label htmlFor=\"username_login\">Username</label>\r\n              </div>\r\n              <div className=\"form-floating\">\r\n                <input\r\n                  className=\"form-control mb-3\"\r\n                  type=\"password\"\r\n                  required\r\n                  id=\"password_login\"\r\n                  placeholder=\"password\"\r\n                  onChange = {(e) => setPassword(e.target.value)}\r\n                />\r\n                <label htmlFor=\"password_login\">Password</label>\r\n              </div>\r\n              <button\r\n                id=\"login_btn\"\r\n                type=\"submit\"\r\n                className=\"w-100 btn btn-lg btn-primary\"\r\n              >\r\n                Login\r\n              </button>\r\n            </form>\r\n\r\n            <div className=\"mt-3\">\r\n              <p>\r\n                Don't have an account? <Link to=\"/register\">Register</Link>\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n     \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Auth from \"../auth.js\";\r\n\r\nconst Register = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  \r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    //when the user submits the form, we want to log them in using the Auth class\r\n    Auth.register(username, password);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"container d-flex justify-content-evenly\">\r\n          <div className=\"login w-50 mt-5\">\r\n            <h2>Register</h2>\r\n            <form className=\"mt-3\" onSubmit={onSubmit}>\r\n              <div className=\"form-floating mt-2\">\r\n                <input\r\n                  className=\"form-control mb-3\"\r\n                  type=\"text\"\r\n                  required\r\n                  placeholder=\"Username\"\r\n                  onChange = {(e) => setUsername(e.target.value)}\r\n                />\r\n                <label htmlFor=\"username_login\">Username</label>\r\n              </div>\r\n              <div className=\"form-floating\">\r\n                <input\r\n                  className=\"form-control mb-3\"\r\n                  type=\"password\"\r\n                  required\r\n                  placeholder=\"password\"\r\n                  onChange = {(e) => setPassword(e.target.value)}\r\n                />\r\n                <label htmlFor=\"password_login\">Password</label>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"w-100 btn btn-lg btn-primary\"\r\n              >\r\n                Register\r\n              </button>\r\n            </form>\r\n\r\n            <div className=\"mt-3\">\r\n              <p className=\"text-sm sm:text-base\">\r\n                Already have an account? <Link to=\"/login\">Sign in</Link>\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n     \r\n        </div>\r\n      </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","//code below is from https://stackoverflow.com/questions/69864165/error-privateroute-is-not-a-route-component-all-component-children-of-rou\r\n\r\nimport React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\n\r\nconst GuardedRoute = (props) => {\r\n  //code below destructure props\r\n  const { component: Component, user, ...rest } = props;\r\n\r\n  //user is an object and we can check if object is empty using code below\r\n  //if user is not empty, then we will redirect to main page\r\n  if (Object.keys(user).length !== 0) {\r\n    return <Outlet {...rest} />;\r\n  } else { //if user is empty, then we will redirect to login page\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n}\r\n\r\nexport default GuardedRoute;","import React, { useState, useEffect} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport '../styles/myFoods.css'\r\nconst MyFoods = (props) => {\r\n\r\n    const [foods, setFoods] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n    const [calories, setCalories] = useState(0);\r\n    const [protein, setProtein] = useState(0);\r\n    const [date, setDate] = useState(\"\");\r\n    const [foodID, setFoodID] = useState(\"\");\r\n    const [allTotals, setAllTotals] = useState([]);\r\n    const [totalInfoForSelected, setTotalInfoForSelected] = useState({id: '', calories: 0, protein: 0});\r\n    const { user } = props;\r\n\r\n    useEffect(() => {\r\n        // clean up controller when component unmounts. This prevents memory leaks\r\n        let isSubscribed = true;\r\n    \r\n          //when page loads, get all foods and totals from database\r\n            axios.get(\"http://localhost:5000/foods/user/\" + user)\r\n            .then((res) => {\r\n              if (isSubscribed) {\r\n                  setFoods(res.data);\r\n              }\r\n            })\r\n            .catch((error) => console.log(error));\r\n\r\n            axios.get(\"http://localhost:5000/totals/user/\" + user)\r\n            .then((res) => {\r\n                if (isSubscribed) {\r\n                    setAllTotals(res.data);\r\n                }\r\n            }).catch((error) => console.log(error));\r\n        \r\n          return () => {\r\n            //clean up\r\n            isSubscribed = false\r\n            setFoods([]);\r\n            \r\n          };\r\n          //dependency: user if user changes\r\n      }, [user]); \r\n     \r\n    //renders the list of foods created by the user\r\n    function displayFoods() {\r\n        //for each food, render it onto the div containing all foods\r\n        return foods.map((food) => {\r\n            return (\r\n                <div className=\"food-div\" key={food._id} tabIndex=\"0\" onClick={()=> updateNutritionFacts(food._id, food.name, food.calories, food.protein, food.date)}>{food.name}</div>\r\n            );\r\n        });  \r\n    }\r\n\r\n    //when a food is clicked, this function will update the nutrition facts of the food\r\n    function displayNutritionFacts() {\r\n        return (\r\n            <div className=\"nutrition-facts-body\">\r\n                <div className=\"flex overflow\">\r\n                    <p className=\"font-semibold mr-2\">Name:</p> \r\n                    <p>{name}</p>\r\n                </div>\r\n                <p>Calories: {calories}</p>\r\n                <p>Protein: {protein} g</p>\r\n                <p>Date Added: {toCorrectDateFormat(date)}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //when a food is clicked, we will render the date of the food in correct format \r\n    function toCorrectDateFormat(date) {\r\n        if (date !== \"\") {\r\n            //make edit and delete buttons appear\r\n            document.getElementById('nutrition-facts-buttons').style.display = 'flex';\r\n           //convert user selected date into a different format\r\n            let dateObject = new Date(date);\r\n            let month = dateObject.getMonth() + 1;\r\n            let day = dateObject.getDate();\r\n            let year = dateObject.getFullYear();\r\n            return month + \"/\" + day + \"/\" + year;\r\n        }\r\n    }\r\n\r\n    //each food has an onclick that if we click on a food, we will update the nutrition facts of the page \r\n    //and display the food's name, calories, protein, and creation date\r\n    function updateNutritionFacts(id, name, calories, protein, date) {\r\n        setFoodID(id);\r\n        setName(name);\r\n        setCalories(calories);\r\n        setProtein(protein);\r\n        setDate(date);\r\n        getTotalForDate(date);\r\n    }\r\n\r\n    //finds the total object in database with the date that matches the date of the food\r\n    function getTotalForDate(date) {\r\n        \r\n        //convert selected date into a different format\r\n        let dateObject = new Date(date);\r\n        let selectedDate = new Date(\r\n            dateObject.getFullYear(),\r\n            dateObject.getMonth(),\r\n            dateObject.getDate()\r\n        ); \r\n        //filter totals by date and return an array of totals that are of the same date as the selected date\r\n        let total = allTotals.filter((total) => {\r\n            //filter every total by date\r\n            let totalDate = new Date(total.date); //convert the MongoDB ISON date format into javascript date format\r\n            var formattedTotalDate = new Date(\r\n              totalDate.getFullYear(),\r\n              totalDate.getMonth(),\r\n              totalDate.getDate()\r\n            ); \r\n            return formattedTotalDate.toString() === selectedDate.toString(); //returns array after formatting to string\r\n           });\r\n           setTotalInfoForSelected({id:total[0]._id, calories: total[0].calories, protein: total[0].protein});\r\n    }\r\n\r\n  //when user clicks on delete button, delete food from database\r\n  function deleteFood() {\r\n    axios.delete(\"http://localhost:5000/foods/\" + foodID).catch((error) => console.log(error));\r\n    //after deleting food, update totals by first getting the Total object from the database. the total id is accessed from hook\r\n    let totalObject = null;\r\n    axios.get('http://localhost:5000/totals/' + totalInfoForSelected.id).then(res => {\r\n      totalObject = res.data;\r\n      //then update the totals by subtracting the calories and protein from the food deleted\r\n      totalObject.calories -= calories;\r\n      totalObject.protein -= protein;\r\n      //then update the total object in the database\r\n      axios.post('http://localhost:5000/totals/update/' + totalInfoForSelected.id, totalObject)\r\n        .then(() => {\r\n           //get rid of the food deleted from the foods array\r\n              let updatedFoodList = foods.filter((food) => {\r\n                return food._id !== foodID;\r\n              });\r\n            //update the foods array\r\n            setFoods(updatedFoodList);\r\n            //update nutrition facts to default values\r\n            setName(\"\");\r\n            setCalories(0);\r\n            setProtein(0);\r\n            setDate(\"\");\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n    }).catch(error => console.log(error));\r\n\r\n  }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"w-5/6 sm:w-3/5 m-auto h-72\">\r\n            <div className=\"header flex justify-between mt-7 border-b\">\r\n             <h4 className=\"text-blue-800 text-lg sm:text-xl\">Your Personal Foods</h4>\r\n             <Link to=\"/add\"><button className=\"bg-green-600 hover:bg-green-700 text-white text-sm sm:text-base py-1 px-2 rounded mb-2\">Add Food</button></Link>\r\n            </div>      \r\n            <div className=\"flex flex-col sm:flex-row mt-5 sm:h-full sm:justify-between\">\r\n                <div className=\"foods-div border-2 border-gray-500 w-full max-h-48 sm:w-6/12 sm:h-full sm:max-h-full overflow-y-scroll\">\r\n                    {displayFoods()}\r\n                </div>\r\n                <div className=\"nutrition-facts sm:w-5/12\">\r\n                    <div className=\"nutrition-facts-header flex flex-col lg:flex-row sm:justify-between items-center mb-3\">\r\n                        <h5 className=\"text-base sm:text-lg nutrition-facts-text\">Nutrition Facts</h5>\r\n                        <div className=\"flex justify-between w-full md:w-28 lg:w-32 2xl:w-32\" id=\"nutrition-facts-buttons\">\r\n                            {/* edit button below */}\r\n                            <Link to={\"/edit/\" + foodID} state={{ id: foodID, totalProtein: totalInfoForSelected.protein, totalCalories: totalInfoForSelected.calories, totalObjectID: totalInfoForSelected.id }}>\r\n                                <button className=\"bg-green-600 hover:bg-green-700 text-white py-0.5 px-2 text-sm sm:text-base rounded border-transparent border-1\">Edit</button>\r\n                            </Link>\r\n                             {/* delete button below */}\r\n                            <button \r\n                                className=\"bg-gray-100 hover:bg-gray-200  border-black border-1 py-0.5 px-2 text-sm sm:text-base rounded\"\r\n                                onClick={() => deleteFood()}>\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    {displayNutritionFacts()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyFoods;","import React, {Fragment, useState, useEffect} from \"react\";\r\nimport { HashRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport './styles/App.css';\r\nimport Navbar from \"./components/Navbar.js\";\r\n\r\nimport FoodDiary from \"./components/FoodDiary.js\";\r\nimport EditFood from \"./components/EditFood.js\";\r\nimport AddFood from \"./components/AddFood.js\";\r\nimport Login from \"./components/Login.js\";\r\nimport Register from \"./components/Register.js\";\r\n\r\nimport GuardedRoute from \"./GuardedRoute.js\";\r\nimport MyFoods from \"./components/MyFoods\";\r\n\r\n\r\nexport default function App() {\r\n  const [user , setUser] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //when page renders, check if user is logged in by checking local storage\r\n  useEffect(() => {\r\n    if (localStorage.getItem('token')) {\r\n      setUser(localStorage.getItem('token'));\r\n    }\r\n    //after checking local storage, set loading to false to show page\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  //we first show a spinner from BootStrap that indicates loading until we know if the user is logged in or not\r\n  if (loading) {\r\n    return (\r\n      <div id=\"loading-page\">\r\n        <div className=\"spinner-border text-primary\" id=\"spinner\" role=\"status\">\r\n          <span className=\"sr-only\"></span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    //when we know if the user is logged in or not, we render the app\r\n    return (\r\n      <div>\r\n        <Router >\r\n          <Fragment>\r\n          {/* render navbar here */}\r\n          <Navbar user={user}/>\r\n  \r\n          {/* all routes are below */}\r\n          <Routes>\r\n            {/* we have a route that is private to authenticated users only. This means that \r\n                only logged in users have accesses to these routes                       */}\r\n            <Route path=\"/\" element={<GuardedRoute user={user} />} >\r\n              <Route path=\"/\" element={<FoodDiary user={user} />} />\r\n              <Route path=\"/edit/:id\" element={<EditFood user={user} />} />\r\n              <Route path=\"/add\" element={<AddFood user={user} />} />\r\n              <Route path=\"/myfoods\" element={<MyFoods user={user} />} />\r\n            </Route>\r\n            \r\n  \r\n            {/* The routes below are accessed only when user is not logged in */}\r\n            <Route path=\"/register\" element={<Register />} />\r\n            <Route path=\"/login\" element={<Login />} />\r\n          </Routes>\r\n  \r\n        </Fragment>\r\n      </Router>\r\n      </div>\r\n    );\r\n  }\r\n    \r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}